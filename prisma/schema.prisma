generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model OtpAttempt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  success     Boolean  @default(false)
  attemptedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@map("otp_attempts")
}

model User {
  id                         String        @id @default(uuid())
  fullName                   String?       @map("full_name")
  phoneNumber                String        @unique @map("phone_number")
  deletedOriginalPhoneNumber String?
  password                   String?
  refreshToken               String?
  role                       Role          @default(USER)
  fileId                     String?       @map("file_id")
  file                       File?         @relation(fields: [fileId], references: [id])
  isActive                   Boolean       @default(true) @map("is_active")
  lastLoginAt                DateTime?
  createdAt                  DateTime      @default(now()) @map("created_at")
  updatedAt                  DateTime      @updatedAt @map("updated_at")
  deletedAt                  DateTime?     @map("deleted_at")
  orders                     Order[]
  Otp                        Otp[]
  Transaction                Transaction[]
  OtpAttempt                 OtpAttempt[]

  @@map("users")
}

model Otp {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  code      Int
  expiresAt DateTime  @map("expires_at")
  used      Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("otps")
}

model Category {
  id        String     @id @default(uuid())
  name      String
  parentId  String?    @map("parent_id")
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")

  @@map("categories")
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  logoId      String?   @map("logo_id")
  logo        File?     @relation(fields: [logoId], references: [id])
  products    Product[]
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("brands")
}

model Currency {
  id         String   @id @default(uuid())
  code       String   @unique
  name       String
  symbol     String
  isMain     Boolean  @default(false)
  rateToMain Decimal  @db.Decimal(12, 6)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("currencies")
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String?
  stock         Int            @default(0)
  price         Decimal        @db.Decimal(12, 2)
  discountPrice Decimal?       @map("discount_price") @db.Decimal(12, 2)
  categoryId    String         @map("category_id")
  category      Category       @relation(fields: [categoryId], references: [id])
  isActive      Boolean        @default(true) @map("is_active")
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  productImages ProductImage[]
  brand         Brand?         @relation(fields: [brandId], references: [id])
  brandId       String?        @map("brand_id")

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  fileId    String   @map("file_id")
  isMain    Boolean  @default(false)
  sortOrder Int?
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id])
  file    File    @relation(fields: [fileId], references: [id])

  @@unique([productId, fileId])
  @@index([productId])
  @@index([fileId])
  @@map("product_images")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model Order {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id])
  total       Float
  status      OrderStatus   @default(PENDING)
  items       OrderItem[]
  payment     Payment?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  Transaction Transaction[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String @map("order_id")
  productId String @map("product_id")
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum PaymentMethod {
  CARD
  CASH
  PAYME
  CLICK
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model Payment {
  id                    String        @id @default(uuid())
  orderId               String        @unique @map("order_id")
  amount                Float
  method                PaymentMethod
  status                PaymentStatus @default(PENDING)
  paymentUrl            String?       @map("payment_url")
  externalTransactionId String?       @map("external_transaction_id")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at")

  order       Order         @relation(fields: [orderId], references: [id])
  Transaction Transaction[]

  @@map("payments")
}

model File {
  id            String         @id @default(uuid())
  name          String
  path          String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  User          User[]
  productImages ProductImage[]
  brand         Brand[]

  @@map("files")
}

enum TransactionType {
  PAYMENT
  REFUND
  WITHDRAWAL
  DEPOSIT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id     String  @id @default(uuid())
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  orderId String? @map("order_id")
  order   Order?  @relation(fields: [orderId], references: [id])

  paymentId String?  @map("payment_id")
  payment   Payment? @relation(fields: [paymentId], references: [id])

  type        TransactionType
  status      TransactionStatus @default(PENDING)
  amount      Float
  description String?
  metadata    Json?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")

  @@index([userId])
  @@index([orderId])
  @@map("transactions")
}
