generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String   @id @default(uuid())
  fullName     String?  @map("full_name")
  phoneNumber  String   @unique @map("phone_number")
  password     String?
  refreshToken String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  orders       Order[]
  Otp          Otp[]

  @@map("users")
}

model Otp {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  code      String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("otps")
}

model Category {
  id        String     @id @default(uuid())
  name      String
  parentId  String?    @map("parent_id")
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  categoryId  String      @map("category_id")
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  files       File[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("products")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model Order {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  total     Float
  status    OrderStatus @default(PENDING)
  items     OrderItem[]
  payment   Payment?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String @map("order_id")
  productId String @map("product_id")
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum PaymentMethod {
  CARD
  CASH
  PAYME
  CLICK
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique @map("order_id")
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model File {
  id        String   @id @default(uuid())
  path      String
  productId String?  @map("product_id")
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}
